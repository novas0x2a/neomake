Include: include/setup.vader

Execute (Setup):
  function! NeomakeTestsCommandMaker(name, cmd)
    let maker = neomake#utils#MakerFromCommand(a:cmd)
    return extend(maker, {'name': a:name, 'errorformat': '%m'})
  endfunction

  let sleep_maker = NeomakeTestsCommandMaker('sleep-maker', 'sleep .1; echo slept')
  let maker_error = NeomakeTestsCommandMaker('error-maker', 'sleep .1; echo error; false')
  let maker_success = NeomakeTestsCommandMaker('success-maker', 'echo success')

  let doesnotexist_maker = {
      \ 'exe': 'doesnotexist',
      \ }

Execute (NeomakeSh: simple serialized makers):
  call g:NeomakeSetupAutocmdWrappers()
  Save g:neomake_serialize
  let g:neomake_serialize = 1

  call neomake#Make(1, [maker_error, maker_success])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['error', 'success']

Execute (NeomakeSh: serialized with global abort):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake_serialize
  let g:neomake_serialize = 1
  Save g:neomake_serialize_abort_on_error
  let g:neomake_serialize_abort_on_error = 1

  call neomake#Make(1, [maker_error, maker_success])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['error']

Execute (NeomakeSh: serialized with buffer overriding global abort):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake_serialize
  let g:neomake_serialize = 1

  call neomake#Make(1, [maker_error, maker_success])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 2
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['error', 'success']

Execute (NeomakeSh: serialized with previous buffer overriding global abort):
  if !NeomakeAsyncTestsSetup() | finish | endif

  Save g:neomake_serialize
  let g:neomake_serialize = 1
  let b:neomake_serialize_abort_on_error = 1
  call neomake#Make(1, [sleep_maker, maker_error, maker_success])

  let bufnr = bufnr('%')
  laddexpr ''
  new
  NeomakeTestsWaitForFinishedJobs
  AssertEqual getloclist(0), []

  wincmd p

  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['slept', 'error']
  wincmd p
  bd

Execute (NeomakeSh: serialized after doesnotexist: continue):
  if !NeomakeAsyncTestsSetup() | finish | endif

  Save g:neomake_serialize
  let g:neomake_serialize = 1

  call neomake#Make(1, [doesnotexist_maker, maker_success])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['success']

Execute (NeomakeSh: serialized after doesnotexist: abort):
  call g:NeomakeSetupAutocmdWrappers()
  Save g:neomake_serialize
  let g:neomake_serialize = 1

  let doesnotexist_maker.serialize_abort_on_error = 1
  call neomake#Make(1, [doesnotexist_maker, maker_success])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['success']
